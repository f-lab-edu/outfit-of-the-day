plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.4'
    id 'io.spring.dependency-management' version '1.1.3'
    id "org.asciidoctor.jvm.convert" version "3.3.2"
}

java {
    sourceCompatibility = '17'
}

group = 'study'
version = '0.0.1-SNAPSHOT'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    // asciidoctor extension에 대한 설정을 넣어준다.
    asciidoctorExt
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.h2database:h2'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    implementation 'mysql:mysql-connector-java:8.0.23'
}


// ext: build.gradle에서 사용하는 전역 변수를 정의하는 부분
ext {
    // 전역 변수로 snippet을 저장할 directory를 설정한다.
    snippetsDir = file('build/generated-snippets')
}

test {
    // test가 끝난 결과물을 snippetsDir에 저장한다.
    outputs.dir snippetsDir
}

asciidoctor {
    dependsOn test
    inputs.dir snippetsDir
    configurations 'asciidoctorExt'

    // test -> asciidoctor 순으로 테스크가 수행된다.
    dependsOn test

}

// bootJar: 실행 가능한 *.jar 파일을 만드는 역할을 수행한다.
bootJar {
    // test -> asciidoctor -> bootJar 순으로 task가 수행된다.
    dependsOn asciidoctor

    // asciidoctor.outputDir: '/build/docs/asciidocs'
    from("${asciidoctor.outputDir}") {
        // asciidoctor.outputDir 폴더에 있는 파일을
        into 'static/docs'
    }
}

test {
    useJUnitPlatform()
}



