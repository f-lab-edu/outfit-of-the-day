plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.4'
    id 'io.spring.dependency-management' version '1.1.3'
    id "org.asciidoctor.jvm.convert" version "3.3.2"
    id "jacoco"
    id "com.gorylenko.gradle-git-properties" version "2.4.1" // actuator - 최신 깃 커밋 정보 접근
}

ext {
    snippetsDir = file('build/generated-snippets') // 전역 변수로 snippet을 저장할 directory를 설정한다.
}

java {
    sourceCompatibility = '17'
}

jacoco {
    toolVersion "0.8.8"
    reportsDirectory = layout.buildDirectory.dir("reports/jacoco")
}

group = 'study'
version = '0.0.1-SNAPSHOT'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    asciidoctorExt // asciidoctor extension에 대한 설정을 넣어준다.
}

repositories {

    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-actuator' // actuator 추가
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.h2database:h2'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    implementation 'mysql:mysql-connector-java:8.0.23'
    implementation 'io.sentry:sentry-logback:1.7.30' // sentry-logback 연동 추가

}


asciidoctor {
    inputs.dir snippetsDir
    configurations 'asciidoctorExt'

    dependsOn test // test -> asciidoctor 순으로 테스크가 수행된다.

}

// bootJar: 실행 가능한 *.jar 파일을 만드는 역할을 수행한다.
bootJar {
    dependsOn asciidoctor // test -> asciidoctor -> bootJar 순으로 task가 수행된다.

    // asciidoctor.outputDir: '/build/docs/asciidocs'
    from("${asciidoctor.outputDir}") {
        into 'static/docs' // asciidoctor.outputDir 폴더에 있는 파일을
    }
}

test {
    useJUnitPlatform()
    // test가 끝난 결과물을 snippetsDir에 저장한다.
    outputs.dir snippetsDir
}

task testWithJacoco {
    finalizedBy 'jacocoTestReport' // 테스트 종료 이후에 레포트를 생성
    finalizedBy 'jacocoTestCoverageVerification' // 코드 커버리지가 규칙을 통과하지 않으면 빌드를 실패시킨다.
}

jacocoTestReport {
    dependsOn test
    reports {
        html.required = true
        html.outputLocation = file("$buildDir/jacoco/index.html")
        xml.required = true
        xml.outputLocation = file("$buildDir/jacoco/index.xml")
    }
    afterEvaluate {
        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it, excludes: [
                            '**/*Application*',
                            '**/*Exception*',
                            '**/request/**',
                            '**/response/**',
                            '**/util/**'

                    ])
                })
        )
    }
}


jacocoTestCoverageVerification {
    violationRules {
        rule {
            enabled = true
            element = 'CLASS'

            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.60
            }

            excludes = [
                    '*.*Application',
                    '*.*ExceptionHandler',
                    '**.exception.**',
                    '**.response.**',
                    '**.util.**',
                    '*.*Config'
            ]
        }
    }
}


// 빌드 정보 actuator에 추가
// META_INF/build-info.properties 가 생성됨
springBoot {
    buildInfo()
}

